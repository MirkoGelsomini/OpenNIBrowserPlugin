<!-- saved from url=(0014)about:internet -->
<!--
/* Copyright (c) 2007 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
-->
<html>
<head>
  <title>YouTube data API Video Browser</title>
  <script src="video_browser.js" type="text/javascript"></script>
      <script src="http://www.google.com/jsapi" type="text/javascript"></script>
    <script type="text/javascript">
      google.load("swfobject", "2.1");
    </script>    
    <script type="text/javascript">
      function sendExternalHost(message) {
	if(window.externalHost !== undefined)
	{
		window.externalHost.postMessage(message, "about:blank");
	} else { document.getElementById('shit').innerHTML = message; }
	    
      }

      var currentMovieLength = 0;

      // Update a particular HTML element with a new value
      function updateHTML(elmId, value) {
        document.getElementById(elmId).innerHTML = value;
      }
      
      function GetErrorDesc(errorCode)
      {
        switch (errorCode) {
	 case 2: return "Invalid parameter";
	 case 100: return ""; // left this blank since it shows up for valid videos in berkelium for some reason
	 case 101:
	 case 150: return "No permission to play video in embedded player";
        }
	return "Unknown error code: " + errorCode;
      }
		  

      // This function is called when an error is thrown by the player
      function onPlayerError(errorCode) {
	//updateHTML("errorMsg", GetErrorDesc(errorCode));
        alert("An error occured of type:" + errorCode);
      }
      
      // This function is called when the player changes state
      function onPlayerStateChange(newState) {
        updateHTML("playerState", newState);
      }

	// position between 0.0 to 1.0
      function seek(position) {
	sendExternalHost("seeking to position " + position);
	if ((position < 0) || (position > 1)) {
		return;
	} else {
		if (ytplayer) {
			var duration = ytplayer.getDuration();
			if (duration == 0) {
				return;
			}
			ytplayer.seekTo(duration*position, true);
		}
	}
      }
      
     
      // Allow the user to set the volume from 0-100
      function setVideoVolume(volume) {
        if(isNaN(volume) || volume < 0 || volume > 100) {
        }
        else if(ytplayer){
          ytplayer.setVolume(volume);
        }
      }
      
      function playVideo() {
        if (ytplayer) {
          ytplayer.playVideo();
        }
      }
      
      function pauseVideo() {
        if (ytplayer) {
          ytplayer.pauseVideo();
        }
      }

      function stopVideo() {
        if (ytplayer) {
          ytplayer.stopVideo();
        }
      }
      
      function muteVideo() {
        if(ytplayer) {
          ytplayer.mute();
        }
      }
      
      function unMuteVideo() {
        if(ytplayer) {
          ytplayer.unMute();
        }
      }
      

	function loadVideo(videoId)
	{
		if (ytplayer) {
			//updateHTML("errorMsg", "");
			ytplayer.loadVideoById(videoId);
		}
	}
      
      function updateBerkelium() {
        var state = ytplayer.getPlayerState();
	
	var progress = 0
        if (state == -1) { // if not loaded yet
          progress = 0;
        } else if (state == 0) {
          // video ended
          progress = 1.0;
        } else {
	  var total = ytplayer.getDuration();
          if (total > 0) {
            progress = ytplayer.getCurrentTime() / total;
          }
        }
        sendExternalHost("progress=" + progress);
      }

      function onYouTubePlayerReady(playerId) {
        ytplayer = document.getElementById("ytPlayer");
        ytplayer.addEventListener("onStateChange", "onPlayerStateChange");
        ytplayer.addEventListener("onError", "onPlayerError");
	window.setInterval(updateBerkelium, 250);
      }


      
      function loadPlayer(width, height) {
        var params = { allowScriptAccess: "always" };
        var atts = { id: "ytPlayer" };
        swfobject.embedSWF("http://www.youtube.com/apiplayer?" +
                           "&enablejsapi=1&playerapiid=player1", 
                           "videoDiv", width, height, "8", null, null, params, atts);
      }

    </script>

</head>
<body onload="loadPlayer(320,240);">
<div id="main">
  <div id="titleBar">
    <div id="titleText"><h1>YouTube data API Video Browser</h1></div>
    <div id="searchBox">
      <form id="searchForm" onsubmit="ytvb.listVideos('all', this.searchTerm.value, 1); return false;">
        <input name="searchTerm" type="text" value="puppy">
        <input type="submit" value="Search">
      </form>
    </div>
    <br />
  </div>
  <div id="videoDiv">Loading...</div>

  <br clear="all" />
  <div id="searchResults">
    <div id="searchResultsListColumn">
      <div id="searchResultsVideoList">
        <table id="searchResultsVideoListTable">
        </table>
      </div>
      <div id="searchResultsNavigation">
        <form id="navigationForm">
          <input type="button" id="previousPageButton" onclick="ytvb.listVideos(ytvb.previousQueryType, ytvb.previousSearchTerm, ytvb.previousPage);" value="Back" style="display: none;"></input>
          <input type="button" id="nextPageButton" onclick="ytvb.listVideos(ytvb.previousQueryType, ytvb.previousSearchTerm, ytvb.nextPage);" value="Next" style="display: none;"></input>
        </form>
      </div>
    </div>
    <div id="searchResultsVideoColumn">
      <div id="videoPlayer"></div>
      <div id="relatedVideos"></div>
      <div id="userVideos"></div>
    </div> 
  </div>
</div>
</body>
</html>
